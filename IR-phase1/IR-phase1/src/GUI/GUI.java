/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import MainPackage.Main;
import MainPackage.FileInputStream1;
import MainPackage.ReadFile1MaghaleBased;
import MainPackage.Test;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Hojjat
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        //hojjat
        redirectConsuledOnUITextArea();
        buttonGroup1.add(dataInputStream);
        buttonGroup1.add(pushBackInputStream);
        buttonGroup1.add(bufferedReader);
        buttonGroup1.add(fileInputStream);
        buttonGroup1.add(pushBackReader);
        buttonGroup1.add(bufferedInputStream);
        bufferedReader.setSelected(true);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        calcBestBufferSize = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        inputPath = new javax.swing.JTextField();
        outputPath = new javax.swing.JTextField();
        selectInputPath = new javax.swing.JButton();
        chooseOutputPath = new javax.swing.JButton();
        bufferedReader = new javax.swing.JRadioButton();
        fileInputStream = new javax.swing.JRadioButton();
        dataInputStream = new javax.swing.JRadioButton();
        pushBackInputStream = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        status = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pushBackReader = new javax.swing.JRadioButton();
        bufferedInputStream = new javax.swing.JRadioButton();
        setBufferSize = new javax.swing.JCheckBox();
        bufferSize = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        calcBestBufferSize.setText("Calculate Best Buffer Size");
        calcBestBufferSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcBestBufferSizeActionPerformed(evt);
            }
        });

        jButton2.setText("Search for specified words");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sort articles words");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        inputPath.setText("input file path ...");

        outputPath.setText("result files path ...");

        selectInputPath.setText("select");
        selectInputPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputPathActionPerformed(evt);
            }
        });

        chooseOutputPath.setText("select");
        chooseOutputPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOutputPathActionPerformed(evt);
            }
        });

        bufferedReader.setText("BufferedReader");

        fileInputStream.setText("FileInputStream");
        fileInputStream.setActionCommand("FileInputStream");

        dataInputStream.setText("DataInputStream");

        pushBackInputStream.setText("PushBackInputStream");
        pushBackInputStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushBackInputStreamActionPerformed(evt);
            }
        });

        status.setColumns(20);
        status.setRows(5);
        jScrollPane2.setViewportView(status);

        jLabel1.setText("Algorithm Memory Usage(KB) : ");

        jLabel2.setText("128");

        pushBackReader.setText("PushBackReader");

        bufferedInputStream.setText("BufferedInputStream");

        setBufferSize.setText("set buffer size");
        setBufferSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                setBufferSizeStateChanged(evt);
            }
        });
        setBufferSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBufferSizeActionPerformed(evt);
            }
        });

        bufferSize.setText("best buffer size");
        bufferSize.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pushBackInputStream, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bufferedInputStream, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataInputStream, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(calcBestBufferSize, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(setBufferSize)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bufferSize))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(bufferedReader)
                                                    .addComponent(fileInputStream)
                                                    .addComponent(pushBackReader))
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addComponent(outputPath)
                                    .addComponent(inputPath))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectInputPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chooseOutputPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectInputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseOutputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setBufferSize)
                    .addComponent(bufferSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferedReader)
                    .addComponent(bufferedInputStream))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataInputStream)
                    .addComponent(fileInputStream))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pushBackInputStream)
                    .addComponent(pushBackReader))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcBestBufferSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void pushBackInputStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushBackInputStreamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pushBackInputStreamActionPerformed

    private void calcBestBufferSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcBestBufferSizeActionPerformed
        // TODO add your handling code here:
//        new Thread(new Runnable() {
//
//            @Override
//            public void run() {
//                if (inputsAreOk()) {
//                    Main main = new Main((setBufferSize.isSelected() ? Integer.parseInt(bufferSize.getText()) : -1), inputPath.getText(), outputPath.getText());
//                    if (bufferedReader.isSelected()) {
//                        main.bufferedReader1();
//                    } else if (fileInputStream.isSelected()) {
//                        main.fileInputStream1();
//                    } else if (pushBackReader.isSelected()) {
//                        main.pushBackReader1();
//                    } else if (dataInputStream.isSelected()) {
//                        main.dataInputStream1();
//                    } else if (pushBackInputStream.isSelected()) {
//                        main.pushBackInputStream1();
//                    } else if (bufferedInputStream.isSelected()) {
//                        main.bufferedInputStream1();
//                    }
//                }
//            }
//        }).start();

    }//GEN-LAST:event_calcBestBufferSizeActionPerformed

    private void selectInputPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectInputPathActionPerformed
        showFileChooser();
    }//GEN-LAST:event_selectInputPathActionPerformed

    private void chooseOutputPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseOutputPathActionPerformed
        showPathChooser();
    }//GEN-LAST:event_chooseOutputPathActionPerformed

    private void setBufferSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBufferSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setBufferSizeActionPerformed

    private void setBufferSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_setBufferSizeStateChanged
        // TODO add your handling code here:
        if (setBufferSize.isSelected()) {
            bufferSize.setEnabled(true);
        } else {
            bufferSize.setEnabled(false);
        }
    }//GEN-LAST:event_setBufferSizeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new GUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bufferSize;
    private javax.swing.JRadioButton bufferedInputStream;
    private javax.swing.JRadioButton bufferedReader;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton calcBestBufferSize;
    private javax.swing.JButton chooseOutputPath;
    private javax.swing.JRadioButton dataInputStream;
    private javax.swing.JRadioButton fileInputStream;
    private javax.swing.JTextField inputPath;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField outputPath;
    private javax.swing.JRadioButton pushBackInputStream;
    private javax.swing.JRadioButton pushBackReader;
    private javax.swing.JButton selectInputPath;
    private javax.swing.JCheckBox setBufferSize;
    private javax.swing.JTextArea status;
    // End of variables declaration//GEN-END:variables

    private void redirectConsuledOnUITextArea() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                printInStatusArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                printInStatusArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    public void printInStatusArea(final String s) {
        status.append(s);
        status.setCaretPosition(status.getDocument().getLength());
    }

    private void showPathChooser() {

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        int pressedButton = fileChooser.showSaveDialog(this);
        if (pressedButton == JFileChooser.APPROVE_OPTION) {
            outputPath.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }

    private void showFileChooser() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter1 = new FileNameExtensionFilter("Text File(.txt)", new String[]{"txt"});
        fileChooser.addChoosableFileFilter(filter1);
        fileChooser.setFileFilter(filter1);
        fileChooser.setAcceptAllFileFilterUsed(false);
        int pressedButton = fileChooser.showOpenDialog(this);
        if (pressedButton == JFileChooser.APPROVE_OPTION) {
            inputPath.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }

    private boolean inputsAreOk() {
        if (setBufferSize.isSelected()) {

            try {
                int bufferSize = Integer.parseInt(this.bufferSize.getText());
                if (bufferSize > 100 * 1024 * 1024 || bufferSize < 1) {
                    System.out.println("invalid buffer size!");
                    System.out.println("buffers size must be between 1 and 100M");
                    return false;
                }
            } catch (Exception e) {
                System.out.println("invalid buffer size!");
                System.out.println("write a valid integer");
                return false;
            }
        }
        File inputFile = new File(inputPath.getText());
        if (!inputFile.isFile() || !inputFile.exists()) {
            System.out.println("invalid input file path!");
            return false;
        }
        File outputDirectory = new File(outputPath.getText());
        if (!outputDirectory.isDirectory()) {
            System.out.println("invalid output directory path!");
            return false;
        }
        return true;
    }
}
